<?php

namespace AppBundle\Entity\Report;

use AppBundle\Entity as EntityDir;
use Doctrine\ORM\EntityRepository;

/**
 * ReportRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends EntityRepository
{
    /**
     * Create new year's report copying data over (and set start/endDate accordingly).
     *
     * @param EntityDir\Report\Report $report
     *
     * @return EntityDir\Report\Report
     */
    public function createNextYearReport(EntityDir\Report\Report $report)
    {
        //lets clone the report
        $newReport = new EntityDir\Report\Report();
        $newReport->setClient($report->getClient());
        $newReport->setCourtOrderType($report->getCourtOrderType());
        $newReport->setType($report->getType());
        //TODO add the 103 21k assets check and type change
        $newReport->setStartDate($report->getEndDate()->modify('+1 day'));
        $newReport->setEndDate($report->getEndDate()->modify('+12 months -1 day'));
        $newReport->setReportSeen(false);
        $newReport->setNoAssetToAdd($report->getNoAssetToAdd());

        // clone assets
        foreach ($report->getAssets() as $asset) {
            $newAsset = clone $asset;
            $newAsset->setReport($newReport);
            $this->_em->detach($newAsset);
            $this->_em->persist($newAsset);
        }

        // clone accounts
        //  opening balance = closing balance
        //  opening date = closing date
        foreach ($report->getBankAccounts() as $account) {
            $newAccount = new EntityDir\Report\Account();
            $newAccount->setBank($account->getBank());
            $newAccount->setAccountType($account->getAccountType());
            $newAccount->setSortCode($account->getSortCode());
            $newAccount->setAccountNumber($account->getAccountNumber());
            $newAccount->setOpeningBalance($account->getClosingBalance());
            $newAccount->setCreatedAt(new \DateTime());
            $newAccount->setReport($newReport);

            $this->_em->persist($newAccount);
        }
        // persist
        $this->_em->persist($newReport);
        $this->_em->flush();

        return $newReport;
    }

    /**
     * @deprecated addTransactionsToReportIfMissing
     * add empty Transaction to Report.
     * Called from doctrine listener.
     *
     * @param Report $report
     *
     * @return int changed records
     */
    public function addTransactionsToReportIfMissing(Report $report)
    {
        $ret = 0;

        if (count($report->getTransactions()) > 0) {
            return $ret;
        }

        $transactionTypes = $this->_em->getRepository('AppBundle\Entity\Report\TransactionType')
            ->findBy([], ['displayOrder' => 'ASC']);

        foreach ($transactionTypes as $transactionType) {
            $transaction = new Transaction($report, $transactionType, []);
            $report->getTransactions()->add($transaction);
            $this->_em->persist($transaction);
            ++$ret;
        }

        return $ret;
    }

    /**
     * add empty Debts to Report.
     * Called from doctrine listener.
     *
     * @param Report $report
     *
     * @return int changed records
     */
    public function addDebtsToReportIfMissing(Report $report)
    {
        $ret = 0;

        // skips if already added
        if (count($report->getDebts()) > 0) {
            return $ret;
        }

        foreach (Debt::$debtTypeIds as $row) {
            $debt = new Debt($report, $row[0], $row[1], null);
            $this->_em->persist($debt);
            ++$ret;
        }

        return $ret;
    }

}
