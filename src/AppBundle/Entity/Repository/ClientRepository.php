<?php

namespace AppBundle\Entity\Repository;

use AppBundle\DTO\ClientDto;
use AppBundle\Entity\Client;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * ClientRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository
{
    /**
     * Search Clients
     *
     * @param string $query     Search query
     * @param string $orderBy   field to order by
     * @param string $sortOrder order of field order ASC|DESC
     * @param int    $limit     number of results to return
     * @param string $offset
     *
     * @return Client[]|array
     */
    public function searchClients($query = '', $orderBy = 'lastname', $sortOrder = 'ASC', $limit = 100, $offset = '0')
    {
        $qb = $this->createQueryBuilder('c');
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
        $qb->orderBy('c.' . $orderBy, $sortOrder);

        if ($query) {
            if (Client::isValidCaseNumber($query)) { // case number
                $qb->andWhere('lower(c.caseNumber) = :cn');
                $qb->setParameter('cn', strtolower($query));
            } else { // client.lastname
                $qb->andWhere('lower(c.lastname) LIKE :qLike ');
                $qb->setParameter('qLike', '%' . strtolower($query) . '%');
            }
        }

        // ensure max 100 results
        $limit = ($limit <= 100) ? $limit : 100;
        $qb->setMaxResults($limit);

        $clients = $qb->getQuery()->getResult(); /* @var $clients Client[] */

        return $clients;
    }

    /**
     * @param User $user
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findAllClientIdsByUser(User $user)
    {
        $conn = $this->getEntityManager()->getConnection();
        $stmt = $conn->executeQuery(
            'select deputy_case.client_id FROM deputy_case WHERE deputy_case.user_id = ?',
            [$user->getId()]
        );

        return array_map('current', $stmt->fetchAll());
    }

    /**
     * @param User $user
     * @param $clientId
     * @throws \Doctrine\DBAL\DBALException
     */
    public function saveUserToClient(User $user, $clientId)
    {
        $conn = $this->getEntityManager()->getConnection();

        $conn->executeQuery(
            'INSERT INTO deputy_case (client_id, user_id) VALUES (?, ?) ON CONFLICT DO NOTHING',
            [$clientId, $user->getId()]
        );
    }

    /**
     * @param User $user
     * @param $teamId
     * @throws \Doctrine\DBAL\DBALException
     */
    public function saveUserToTeam(User $user, $teamId)
    {
        $conn = $this->getEntityManager()->getConnection();

        $conn->executeQuery(
            'INSERT INTO user_team (user_id, team_id) VALUES (?, ?) ON CONFLICT DO NOTHING',
            [$user->getId(), $teamId]
        );
    }

    public function getDtoCollectionByDeputy($deputyId)
    {
        $sql = 'select c.id, c.case_number, c.firstname, c.lastname, c.email, count(report.id) as report_count, odr.id as ndr_id 
from client c join deputy_case on deputy_case.client_id = c.id 
left join odr on odr.client_id = c.id
join report on report.client_id = c.id
where deputy_case.user_id = :deputyId
group by c.id, c.case_number, c.firstname, c.lastname, c.email, odr.id';
        //$sql = 'select c.id, c.case_number, c.firstname, c.lastname, c.email, 322 as report_count, 32 as ndr_id from client c  where c.id = :deputyId';
        $params = ['deputyId' => $deputyId];

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute($params);

        $results = $stmt->fetchAll();

        //var_dump($results); exit;
        
        $dtos = [];
        foreach ($results as $result) {
            $dtos[] = new ClientDto($result['id'], $result['case_number'], $result['firstname'], $result['lastname'], $result['email'], $result['report_count'], $result['ndr_id']);
        }

        return $dtos;
//
//
//
//        $em = $this->getEntityManager();
//        $query = $em->createQuery('SELECT NEW AppBundle\DTO\ClientDto(c.id, c.caseNumber, c.firstname, c.lastname, c.email, 321, 21) FROM AppBundle\Entity\Client c JOIN  WHERE c.id=?1');
//        $query->setParameter(1, 80);
//
//        return $query->getResult();
    }
}
